// Mocks generated by Mockito 5.4.6 from annotations
// in sight_mate/test/modules/shared/theme/presentation/theme_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sight_mate/modules/shared/theme/domain/theme_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeThemeData_0 extends _i1.SmartFake implements _i2.ThemeData {
  _FakeThemeData_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [ThemeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeRepository extends _i1.Mock implements _i3.ThemeRepository {
  MockThemeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ThemeData get lightTheme =>
      (super.noSuchMethod(
            Invocation.getter(#lightTheme),
            returnValue: _FakeThemeData_0(this, Invocation.getter(#lightTheme)),
          )
          as _i2.ThemeData);

  @override
  _i2.ThemeData get darkTheme =>
      (super.noSuchMethod(
            Invocation.getter(#darkTheme),
            returnValue: _FakeThemeData_0(this, Invocation.getter(#darkTheme)),
          )
          as _i2.ThemeData);

  @override
  _i4.Future<_i2.ThemeMode?> loadThemeMode() =>
      (super.noSuchMethod(
            Invocation.method(#loadThemeMode, []),
            returnValue: _i4.Future<_i2.ThemeMode?>.value(),
          )
          as _i4.Future<_i2.ThemeMode?>);

  @override
  _i4.Future<void> saveThemeMode(_i2.ThemeMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#saveThemeMode, [mode]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
